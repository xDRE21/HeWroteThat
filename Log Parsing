#!/usr/bin/env python3        

# IMPORT NECESSARY LIBRARIES
import sys
import re
import gzip
import socket              

# CREATE HELPER FUNCTIONS
def log_parse (args):
# Open your log file and read the lines

    with gzip.open(args, 'rt') as f:
        content = f.read()
        lines = content.split()
        # print(lines)

# Creating a list to hold my IP addresses
    ip_list = []
    
# Loop through the List to match the declared pattern to Identify IPs
    for line in lines:
        pattern = re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})',line)
        
        # Some IPs in the Log are not Useful, Filtering them out
        for ip in pattern:
            if ip == '0.0.0.0':
                pass
            else: ip_list.append(ip)
    # print(ip_list)
    
# Create a dictionary to identify unique IPs, and count them
    ip_dict = {}
    for ip in ip_list:
        if ip in ip_dict:
            ip_dict[ip] += 1
        else:
            ip_dict[ip] = 1
    # print(ip_dict)

# Sorting the Dictionary By Key at first, This will make my IPs in Order, socket helps find IPs of different lengths
    ip_sort1= dict(sorted(ip_dict.items(), key=lambda x: socket.inet_aton(x[0])))
    
#Sorting the KEY Sorted Dict by Value now, making the amount of times the IP was counted in order
    ip_sort2= {k: v for k, v in sorted(ip_sort1.items(), key=lambda x: x[1])}
    # print(ip_sort1)
    # print(ip_sort2)

# Now I format My table, '-' being the separator of top and bottom
# {} with .format allows me to specify the amount of area between each field and which Variable or Word I want used in the {}
    print('-------------------------------------')
    print('| {:>7} | {:>5} | {:>15} |'.format('Percent', 'Count', 'IP'))
    print('-------------------------------------')
    
    # Loop through our Sorted Dictionary to display each of the fields for each Unique IP
    for ip, count in ip_sort2.items():
        total = sum(ip_dict.values())               # Counting the total of all attempts over ALL IPs
        portion = str((count / total) * 100)        # Creating the % of hits, dividing the individual IP against Total * 100 to show a percent as decimals
        percent= portion[:6]                        # Showing the first 5 digits 
        if len(percent) < 5:                        # If the end percent isn't 5 digits long, add 0s to the end to make it 5 digits
            percent += '00'
        # print(percent)
        print('| {:>7} | {:>5} | {:>15} |'.format(percent,count, ip))

    print('-------------------------------------')
    print('| {:>7} | {:>5} | {:>15} |'.format('Total',total, ''))
    print('-------------------------------------')

# CREATE A MAIN FUNCTION TO CALL HELPER FUNCTIONS
def main(args):                 
    log_parse(args)


# CHECK TO SEE IF THIS SCRIPT IS THE MAIN SCRIPT
if __name__ == '__main__':      
    args = sys.argv[1]     # adjust this for the number of args you need
    main(args)             # calling your main function
